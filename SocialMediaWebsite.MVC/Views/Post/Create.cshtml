@model PostCreateVM

<form class="d-flex justify-content-center" asp-action="Create" method="post">
	<div class="d-flex flex-column w-100" style="max-width: 800px;">
		<div asp-validation-summary="ModelOnly" class="text-danger"></div>
		<div class="card">
			<!--Card Header-->
			<div class="card-header">
				<div class="d-flex align-items-center">
					<img src=@Model.ProfilePicture class="profile-picture rounded-circle" />
					<input type="hidden" asp-for="@Model.ProfilePicture" />
					<h6 class="card-subtitle ms-2">@Model.Username</h6>
					<input type="hidden" asp-for="@Model.Username" />
				</div>
			</div>
			<!--Card Body-->
			<div class="card-body">
				<div class="card-title">
					<input class="w-100 fs-5 border-0" asp-for="@Model.Title" maxlength="150" placeholder="Write the Title of your post here..." contenteditable="true" />
					<span asp-validation-for="@Model.Title" class="text-danger"></span>
				</div>
				<div class="card-text">
					<textarea id="body-text" class="w-100 border-0" asp-for="@Model.Body" maxlength="4000" oninput='CountCharInBody(4000);this.style.height = "";this.style.height = this.scrollHeight + "px"' placeholder="Go ahead and share your thoughts here..." contenteditable="true"></textarea>
					<span id="count-char" class="float-end rounded-pill ps-1 pe-1 mt-1 me-1 bg-info bg-opacity-10 text-muted">0 / 4000</span>
					<span asp-validation-for="@Model.Body" class="text-danger"></span>
				</div>
			</div>
			<!--Card Footer-->
			<div id="selected-tags" class="card-footer d-flex flex-wrap">
				<div id="btn-add-tag" class="rounded-pill border-0 bg-gradient mb-2 ps-2 pe-2">
					<div class="d-flex justify-content-center">
						<span class="ms-2 pe-0">#</span>
						<span id="tag-write-area" class="me-2 ps-1 pe-1" type="text" onblur="FocusOutFromTagArea()">add tags to help people find your posts</span>
					</div>
				</div>
			</div>
		</div>
		<button type="submit" class="btn btn-secondary mt-3 align-self-end">Create Post</button>
	</div>
</form>

@section Scripts {
	<script type="text/javascript">
		var addTagButton;
		var tagWriteArea;
		var selectedTags;

		var tagCount;
		var tagDeleteIndex;		

		$(document).ready(function () {
			selectedTags = document.getElementById("selected-tags");
			tagWriteArea = document.getElementById("tag-write-area");
			addTagButton = document.getElementById("btn-add-tag");

			addTagButton.addEventListener("click", FocusToTagArea);

			tagWriteArea.addEventListener("keydown", function (event) { // keypress is deprecated
				const key = event.key;
				if (key === "Enter") {
					event.preventDefault();
					AddTag(tagWriteArea.textContent);
				}
				// Limit tag length to 50 (tag entity config)
				if (tagWriteArea.textContent.trim().length > 49) {
					if (key !== "Backspace" && key !== "Delete" && key !== "ArrowLeft" && key !== "ArrowRight") {
						event.preventDefault();
					}
				}
			});

			tagCount = 0;
			tagDeleteIndex = -1;
		});

		function AddTag(tagName) {
			tagName = tagName.trim();
			if (tagName.length < 1) return;

			// Create parent div
			const div = document.createElement("div");
			div.id = tagCount;
			div.classList.add("post-tag");
			div.classList.add("rounded-pill");
			// Add click event to div => Clicking a tag will toggle the delete button visibility
			div.addEventListener("click", function () {
				let deleteBtn = this.querySelector(".btn-delete-tag");
				if (deleteBtn.classList.contains('d-none')) {
					deleteBtn.classList.remove('d-none');
				} else {
					deleteBtn.classList.add('d-none');
				}
			});

			// Create span element for tag name
			const node = document.createElement("span");
			const textnode = document.createTextNode("#" + tagName);
			node.appendChild(textnode);
			div.appendChild(node);

			// Create delete button
			div.innerHTML += '<i class="fa-solid fa-trash btn-delete-tag d-none ms-2" onclick="DeleteTag(this)"></i>';

			// Create hidden input for tag value to submit
			const tagAspForHtml = '<input type="hidden" name="TagNames[' + tagCount + ']" value="' + tagName + '" />'
			div.innerHTML += tagAspForHtml;

			selectedTags.insertBefore(div, addTagButton);
			tagCount++;
			tagWriteArea.textContent = "";
		}

		function DeleteTag(element) {
			let tagToDelete = element.parentElement;
			tagDeleteIndex = tagToDelete.id;
			tagToDelete.remove();
			tagCount--;
			ReOrderTags(tagDeleteIndex);
		}

		// Shift the elements after the deleted element to fill its place, this is important to submit TagNames[i] correctly
		function ReOrderTags(index) {
			let remainingTagsCount = (selectedTags.childElementCount - 1); // addTagButton is also a child of selectedTags => -1
			if (remainingTagsCount > 0) {
				for (let i = Number(index); i < remainingTagsCount; i++) {
					var nodeToShift = i + 1;
					var tagDiv = document.getElementById(nodeToShift);
					tagDiv.id = i;
					tagDiv.querySelector("input").setAttribute("name", "TagNames[" + i + "]");
				}
			}
		}

		function FocusToTagArea() {
			if (document.activeElement === tagWriteArea) return;
			tagWriteArea.textContent = "";
			tagWriteArea.setAttribute("contenteditable", true);
			tagWriteArea.focus();
		}

		function FocusOutFromTagArea() {
			if (selectedTags.childElementCount > 1) {
				tagWriteArea.textContent = "add another tag";
			}
			else {
				tagWriteArea.textContent = "add tags to help people find your posts";
			}
			tagWriteArea.setAttribute("contenteditable", false);
		}

		function CountCharInBody(textMax){
			var textLength = $("#body-text").val().length;
			$('#count-char').html(textLength + ' / ' + textMax);
		}
	</script>
}

